import os, uuid, shutil, subprocess, asyncio
from flask import Flask, request, render_template_string, send_from_directory, jsonify
from pyrogram import Client, filters
from pyrogram.types import Message
from threading import Thread

# -----------------------------
# Configuration (ржкрж░рж┐ржмрзЗрж╢рзЗрж░ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ рж▓рзЛржб ржХрж░рзБржи)
# -----------------------------
# ржзрж░рзЗ ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ ржЖржкржирж┐ ржкрж░рж┐ржмрзЗрж╢рзЗрж░ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓ (Environment Variables) рж╕рзЗржЯ ржХрж░рзЗржЫрзЗржиред
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")

app = Flask(__name__)
UPLOAD_FOLDER = "uploads"
STREAM_FOLDER = "streams"

os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(STREAM_FOLDER, exist_ok=True)

# -----------------------------
# ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ (Pyrogram)
# -----------------------------
# Pyrogram Asynchronous рж╣ржУржпрж╝рж╛ ржЙржЪрж┐ржд
bot = Client("bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржлрж╛ржЗрж▓ рж╕рзНржЯрзЛрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржбрж┐ржХрж╢ржирж╛рж░рж┐
# Key: user_id, Value: list of file_paths
user_files = {}

# -----------------------------
# HLS ржХржиржнрж╛рж░рзНрж╕ржи ржлрж╛ржВрж╢ржи (ржЕрзНржпрж╛рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕)
# -----------------------------
async def convert_and_stream(message: Message, file_paths: list):
    """FFmpeg ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржнрж┐ржбрж┐ржУржЧрзБрж▓рж┐ржХрзЗ HLS-ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ ржПржмржВ рж▓рж┐ржЩрзНржХ ржкрж╛ржарж╛ржпрж╝ред"""
    
    # ржПржХрж╛ржзрж┐ржХ ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржПржХржЯрж┐ HLS рж╕рзНржЯрзНрж░рж┐ржо рждрзИрж░рж┐ ржХрж░рж╛рж░ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржПржЦрж╛ржирзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
    # ржПржЦржи ржЖржорж░рж╛ ржПржХржЯрж┐ ржПржХржХ, ржЕржиржирзНржп рж╕рзНржЯрзНрж░рж┐ржо ID ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржХржиржнрж╛рж░рзНрж╕ржи ржХрж░ржмред
    vid_id = str(uuid.uuid4())
    stream_dir = os.path.join(STREAM_FOLDER, vid_id)
    os.makedirs(stream_dir, exist_ok=True)
    hls_file = os.path.join(stream_dir, "master.m3u8")

    try:
        # Concatenating multiple files (ржпржжрж┐ ржПржХрж╛ржзрж┐ржХ ржнрж┐ржбрж┐ржУ ржерж╛ржХрзЗ)
        # Note: Concatenating in 'copy' mode requires consistent codecs.
        # ржПрж░ ржЬржирзНржп ржПржХржЯрж┐ temporary 'concat' file рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
        
        if len(file_paths) > 1:
            concat_file_path = os.path.join(os.path.dirname(file_paths[0]), "concat_list.txt")
            with open(concat_file_path, "w") as f:
                for path in file_paths:
                    f.write(f"file '{path}'\n")
            
            input_args = ["-f", "concat", "-safe", "0", "-i", concat_file_path]
        else:
            input_args = ["-i", file_paths[0]]
        
        
        # FFmpeg copy mode for low CPU load (ржжрзНрж░рзБржд ржПржмржВ рж░рж┐рж╕рзЛрж░рзНрж╕-рж╕рж╣рж╛ржпрж╝ржХ)
        cmd = [
            "ffmpeg", *input_args,
            "-c:v", "copy", "-c:a", "copy",
            "-f", "hls", "-hls_time", "6", "-hls_list_size", "0",
            "-hls_flags", "delete_segments+temp_file",
            hls_file
        ]

        # ржЕрзНржпрж╛рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ржнрж╛ржмрзЗ FFmpeg ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржЪрж╛рж▓рж╛ржирзЛ
        process = await asyncio.create_subprocess_exec(*cmd, 
                                                       stdout=subprocess.PIPE, 
                                                       stderr=subprocess.PIPE)
        
        # ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ рж╢рзЗрж╖ рж╣ржУржпрж╝рж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи
        stdout, stderr = await process.communicate()
        
        if process.returncode != 0:
            raise Exception(f"FFmpeg failed with error:\n{stderr.decode()}")
        
        # Clean up uploaded files and temp folder
        temp_dir = os.path.dirname(file_paths[0])
        shutil.rmtree(temp_dir, ignore_errors=True)
        
        # Send back watch link
        host_url = "https://YOUR_RENDER_URL"  # Change to your server URL
        await message.reply_text(
            f"тЬЕ ржнрж┐ржбрж┐ржУ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рж╕ржорзНржкрзВрж░рзНржг!\nржжрзЗржЦрзБржи: {host_url}/watch/{vid_id}",
            quote=True
        )

    except Exception as e:
        await message.reply_text(f"тЭМ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржгрзЗ рждрзНрж░рзБржЯрж┐: {str(e)}", quote=True)
        # ржмрзНржпрж░рзНрже рж╣рж▓рзЗ ржЖржВрж╢рж┐ржХ ржлрж╛ржЗрж▓ ржУ ржлрзЛрж▓рзНржбрж╛рж░ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛
        shutil.rmtree(stream_dir, ignore_errors=True)
        try:
            temp_dir = os.path.dirname(file_paths[0])
            shutil.rmtree(temp_dir, ignore_errors=True)
        except:
            pass
            

# -----------------------------
# ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
# -----------------------------
@bot.on_message(filters.command("start"))
async def start_cmd(client, message):
    await message.reply_text(
        "ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! ржЖржкржирж┐ ржпрждржЧрзБрж▓рзЛ ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓ (480p/720p/1080p) HLS-ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рждрзЗ ржЪрж╛ржи, рж╕рзЗржЧрзБрж▓рзЛ ржкрж╛ржарж╛ржиред\n\n"
        "рж╕ржм ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржирзЛ рж╣рж▓рзЗ, рж╢рзБржзрзБ **ржбрж╛ржи** (ржмрж╛ **done**) рж▓рж┐ржЦрзЗ ржжрж┐ржиред"
    )
    user_files[message.chat.id] = [] # ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж╢рзБрж░рзБ ржХрж░рж▓рзЗ рждрж╛рж▓рж┐ржХрж╛ржЯрж┐ рж░рж┐рж╕рзЗржЯ ржХрж░рзБржи

@bot.on_message(filters.private & (filters.document | filters.text))
async def handle_user_input(client, message: Message):
    user_id = message.chat.id

    # 1. 'ржбрж╛ржи' ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
    if message.text and message.text.lower() in ["ржбрж╛ржи", "done"]:
        if user_id not in user_files or not user_files[user_id]:
            await message.reply_text("ЁЯд╖тАНтЩВя╕П ржЖржкржирж┐ ржПржЦржиржУ ржХрзЛржирзЛ ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржиржирж┐ред", quote=True)
            return
        
        # ржХржиржнрж╛рж░рзНрж╕ржи ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ рж╢рзБрж░рзБ ржХрж░рзБржи
        await message.reply_text("тП│ ржлрж╛ржЗрж▓ ржкрзЗржпрж╝рзЗржЫрж┐ред HLS рж╕рзНржЯрзНрж░рж┐ржорж┐ржВ рж▓рж┐ржЩрзНржХ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ, ржПржХржЯрзБ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...", quote=True)
        file_paths_to_process = user_files.pop(user_id) # ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзЗ ржбрж┐ржХрж╢ржирж╛рж░рж┐ ржерзЗржХрзЗ ржорзБржЫрзЗ ржжрж┐ржи
        
        # ржХржиржнрж╛рж░рзНрж╕ржи ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржЯрж┐ржХрзЗ ржЕрзНржпрж╛рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ ржЯрж╛рж╕рзНржХрзЗ ржЪрж╛рж▓рж╛ржи
        asyncio.create_task(convert_and_stream(message, file_paths_to_process))
        return

    # 2. ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
    if message.document and message.document.mime_type.startswith("video/"):
        await message.reply_text("ЁЯУе ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓ржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", quote=True)
        
        # ржЕржиржирзНржп ржУ ржирж┐рж░рж╛ржкржж ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐
        vid_id = str(uuid.uuid4())
        temp_dir = os.path.join(UPLOAD_FOLDER, vid_id)
        os.makedirs(temp_dir, exist_ok=True)
        
        # ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржмрж╛ржбрж╝рж╛рждрзЗ рж░рзНржпрж╛ржирзНржбржо ржлрж╛ржЗрж▓ ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
        safe_file_name = str(uuid.uuid4()) + "_" + message.document.file_name
        file_path = os.path.join(temp_dir, safe_file_name)
        
        # ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб
        await message.download(file_path)

        # ржлрж╛ржЗрж▓рзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржЖржкржбрзЗржЯ ржХрж░рзБржи
        if user_id not in user_files:
            user_files[user_id] = []
        user_files[user_id].append(file_path)
        
        count = len(user_files[user_id])
        await message.reply_text(
            f"тЬЕ {count}ржЯрж┐ ржлрж╛ржЗрж▓ ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗред ржЖрж░ржУ ржкрж╛ржарж╛рждрзЗ ржкрж╛рж░рзЗржи ржмрж╛ **ржбрж╛ржи** рж▓рж┐ржЦрзБржиред",
            quote=True
        )
        return

    # 3. ржЕржирзНржпрж╛ржирзНржп ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ (ржпржжрж┐ ржХржиржнрж╛рж░рзНрж╕ржирзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржирж╛ ржХрж░рзЗ)
    if user_id not in user_files or not user_files[user_id]:
        # ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЕржирзНржп ржХрж┐ржЫрзБ рж▓рж┐ржЦрзЗ ржПржмржВ ржХрзЛржирзЛ ржлрж╛ржЗрж▓ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ рж╕рзНржЯрж╛рж░рзНржЯ ржХрж░рж╛рж░ ржХржерж╛ ржмрж▓рзБржиред
        if not (message.text and message.text.lower() in ["ржбрж╛ржи", "done"]):
             await message.reply_text("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓ ржмрж╛ **ржбрж╛ржи** рж▓рж┐ржЦрзБржиред", quote=True)
    
# -----------------------------
# ржлрзНрж▓рж╛рж╕рзНржХ ржУржпрж╝рзЗржм (Flask Web) - ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи ржирзЗржЗ
# -----------------------------
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Stream Video</title>
<link href="https://vjs.zencdn.net/7.15.4/video-js.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script src="https://vjs.zencdn.net/7.15.4/video.min.js"></script>
<style>
body { background:#000; color:#fff; text-align:center; margin-top:30px; }
video { width:90%; height:auto; border-radius:15px; }
</style>
</head>
<body>
<h2>{{title}}</h2>
<video id="video" class="video-js vjs-default-skin" controls></video>
<script>
var video = document.getElementById('video');
if(Hls.isSupported()){
  var hls = new Hls();
  hls.loadSource('{{stream_url}}');
  hls.attachMedia(video);
  hls.on(Hls.Events.MANIFEST_PARSED,function(){video.play();});
}else if(video.canPlayType('application/vnd.apple.mpegurl')){
  video.src='{{stream_url}}';
  video.addEventListener('loadedmetadata',function(){video.play();});
}
</script>
</body>
</html>
"""

@app.route('/')
def home():
    return jsonify({"status":"running","message":"Telegram HLS Streaming Server Live!"})

@app.route('/stream/<vid>/<path:filename>')
def stream(vid, filename):
    return send_from_directory(os.path.join(STREAM_FOLDER, vid), filename)

@app.route('/watch/<vid>')
def watch(vid):
    stream_url = f"/stream/{vid}/master.m3u8"
    return render_template_string(HTML_TEMPLATE, title="Now Streaming", stream_url=stream_url)

# -----------------------------
# ржмржЯ + ржлрзНрж▓рж╛рж╕рзНржХ рж░рж╛ржи ржХрж░рзБржи
# -----------------------------
def run_bot():
    """Pyrogram ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ ржЪрж╛рж▓рж╛ржирзЛрж░ ржЬржирзНржп ржПржХржЯрж┐ рж╕рж╣рж╛ржпрж╝ржХ ржлрж╛ржВрж╢ржиред"""
    # Pyrogram ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ рж░рж╛ржи ржХрж░рж╛рж░ ржЬржирзНржп ржПржЯрж┐ рж╕ржарж┐ржХ ржЙржкрж╛ржпрж╝
    try:
        bot.run()
    except Exception as e:
        print(f"Pyrogram Bot Error: {e}")

if __name__ == "__main__":
    # 1. ржмржЯржХрзЗ ржПржХржЯрж┐ ржкрзГржержХ ржерзНрж░рзЗржбрзЗ рж╢рзБрж░рзБ ржХрж░рзБржи (ржпрж╛рждрзЗ ржПржЯрж┐ ржЗржиржкрзБржЯ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рждрзЗ ржкрж╛рж░рзЗ)
    bot_thread = Thread(target=run_bot)
    bot_thread.start()
    
    # 2. ржлрзНрж▓рзНржпрж╛рж╕рзНржХ рж╕рж╛рж░рзНржнрж╛рж░ржХрзЗ ржорзВрж▓ ржерзНрж░рзЗржбрзЗ рж╢рзБрж░рзБ ржХрж░рзБржи
    # ржПржЯрж┐ ржЕржмрж╢рзНржпржЗ 0.0.0.0 рждрзЗ рж░рж╛ржи ржХрж░рждрзЗ рж╣ржмрзЗ ржпрж╛рждрзЗ ржмрж╛ржЗрж░рзЗрж░ ржерзЗржХрзЗ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛ ржпрж╛ржпрж╝ред
    app.run(host='0.0.0.0', port=5000)
