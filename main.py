from flask import Flask, request, render_template_string, redirect, url_for, session, Response
import re
import requests
import base64 # URL ‡¶è‡¶®‡¶ï‡ßã‡¶°‡¶ø‡¶Ç ‡¶ì ‡¶°‡¶ø‡¶ï‡ßã‡¶°‡¶ø‡¶Ç‡ßü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

app = Flask(__name__)
app.secret_key = "my_secret_key_123"

# ========== ADMIN LOGIN ========== #
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "12345"

# ========== SIMPLE HTML TEMPLATES (Unchanged) ========== #
login_page = """
<!DOCTYPE html>
<html>
<head>
  <title>Admin Login</title>
  <style>
    body {font-family: Arial; background: #121212; color: white; text-align: center;}
    form {margin-top: 150px;}
    input {padding: 10px; margin: 5px; border-radius: 5px;}
    button {padding: 10px 20px; border: none; background: #007bff; color: white; border-radius: 5px;}
  </style>
</head>
<body>
  <h2>üîê Admin Login</h2>
  <form method="post" action="/login">
    <input type="text" name="username" placeholder="Username" required><br>
    <input type="password" name="password" placeholder="Password" required><br>
    <button type="submit">Login</button>
  </form>
</body>
</html>
"""

admin_panel = """
<!DOCTYPE html>
<html>
<head>
  <title>Admin Panel</title>
  <style>
    body {font-family: Arial; background: #121212; color: white; text-align: center;}
    input {padding: 10px; width: 50%; margin: 10px; border-radius: 5px;}
    button {padding: 10px 20px; border: none; background: #28a745; color: white; border-radius: 5px;}
    a {color: #ff4757; text-decoration: none;}
    .link-container { word-break: break-all; margin: 20px 10%; border: 1px solid #333; padding: 15px; background: #1e1e1e; border-radius: 5px;}
  </style>
</head>
<body>
  <h2>‚öôÔ∏è Direct Link Generator</h2>
  <form method="post" action="/generate">
    <input type="text" name="url" placeholder="Enter your link here..." required><br>
    <button type="submit">Generate Direct Link</button>
  </form>
  {% if link %}
    <h3>‚úÖ Proxy Download Link:</h3>
    <div class="link-container">
        <a href="{{ link }}" target="_blank">{{ link }}</a>
    </div>
    <p style="color: #ccc; font-size: 14px;">(‡¶è‡¶á ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶´‡¶≤‡ßá ‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶π‡¶æ‡¶á‡¶° ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)</p>
  {% endif %}
  <br><a href="/logout">Logout</a>
</body>
</html>
"""

# ========== DIRECT LINK GENERATOR LOGIC (Updated to generate Proxy URL) ========== #

def _get_final_external_link(url):
    """
    ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶π‡ßã‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ URL-‡¶ï‡ßá ‡¶Ü‡¶∏‡¶≤ ‡¶°‡¶æ‡¶á‡¶∞‡ßá‡¶ï‡ßç‡¶ü ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßá‡•§
    """
    # 1. Google Drive Link
    if "drive.google.com" in url:
        match = re.search(r"/d/([a-zA-Z0-9_-]+)", url)
        if match:
            file_id = match.group(1)
            # Google Drive ‡¶è‡¶∞ uc?export=download ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
            return f"https://drive.google.com/uc?export=download&id={file_id}"

    # 2. Dropbox Link
    if "dropbox.com" in url:
        # ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá ?dl=1 ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶Ü‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶°‡ßã‡¶Æ‡ßá‡¶® dl.dropboxusercontent.com
        if "?dl=" not in url:
            url += "?dl=1"
        elif "?dl=0" in url:
            url = url.replace("?dl=0", "?dl=1")
        return url.replace("www.dropbox.com", "dl.dropboxusercontent.com")

    # 3. Mediafire Link (‡¶Æ‡¶ø‡¶°‡¶ø‡ßü‡¶æ‡¶´‡¶æ‡ßü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç ‡¶≤‡¶æ‡¶ó‡ßá‡•§
    # ‡¶§‡¶¨‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø ‡¶Ø‡ßá ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶∏‡¶π‡¶ú‡•§)
    if "mediafire.com" in url:
        # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶π‡¶ú ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá, ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∏‡¶ø ‡¶ï‡¶∞‡¶¨‡•§
        pass

    # Default: ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶®‡¶æ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶á‡¶®‡¶™‡ßÅ‡¶ü URL-‡¶ü‡¶ø‡¶á ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá‡•§
    return url

def generate_proxy_link(url):
    """
    ‡¶Ü‡¶∏‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° URL-‡¶ï‡ßá ‡¶è‡¶®‡¶ï‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∏‡¶ø ‡¶∞‡ßÅ‡¶ü‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§
    """
    final_external_url = _get_final_external_link(url)
    
    # URL-‡¶ï‡ßá Base64 ‡¶¶‡¶ø‡ßü‡ßá ‡¶è‡¶®‡¶ï‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
    encoded_url = base64.urlsafe_b64encode(final_external_url.encode()).decode()
    
    # ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∏‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∞‡ßÅ‡¶ü‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
    return url_for('proxy_download', encoded_url=encoded_url, _external=True)


# ========== NEW PROXY ROUTE: Handles Download Streaming ========== #
@app.route("/download/<encoded_url>")
def proxy_download(encoded_url):
    # 1. URL ‡¶°‡¶ø‡¶ï‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
    try:
        original_url = base64.urlsafe_b64decode(encoded_url.encode()).decode()
    except Exception:
        return "Invalid download link format or expired link.", 400

    # 2. ‡¶Ü‡¶∏‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
    try:
        # stream=True ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü ‡¶Ø‡¶æ‡¶§‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Æ‡¶∞‡¶ø‡¶§‡ßá ‡¶≤‡ßã‡¶° ‡¶®‡¶æ ‡¶π‡ßü‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶π‡ßü
        r = requests.get(original_url, stream=True, allow_redirects=True, timeout=30)
        r.raise_for_status() # HTTP ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶≤‡ßá (‡¶Ø‡ßá‡¶Æ‡¶® 404, 500) ValueError ‡¶¶‡ßá‡¶¨‡ßá

        # 3. ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡ßü ‡¶ï‡¶∞‡¶æ
        filename = "file_download" # Default name
        
        # Content-Disposition Header ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶®‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ
        if 'content-disposition' in r.headers:
            match = re.search(r'filename=["\']?(.+?)["\']?$', r.headers['content-disposition'])
            if match:
                filename = match.group(1).strip()
        
        # ‡¶Ø‡¶¶‡¶ø ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü, ‡¶§‡¶¨‡ßá URL ‡¶è‡¶∞ ‡¶∂‡ßá‡¶∑ ‡¶Ö‡¶Ç‡¶∂ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
        if filename == "file_download":
            path_parts = original_url.split('/')
            if path_parts[-1]:
                filename = path_parts[-1].split('?')[0]
                if not filename:
                     filename = "downloaded_file"
        
        # 4. ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶π‡¶æ‡¶á‡¶° ‡¶è‡¶¨‡¶Ç ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶´‡ßã‡¶∞‡¶∏‡¶ø‡¶Ç)
        headers = {
            'Content-Type': r.headers.get('content-type', 'application/octet-stream'),
            'Content-Disposition': f'attachment; filename="{filename}"',
            'Content-Length': r.headers.get('content-length'),
        }

        # 5. ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶∞‡¶æ (chunk by chunk)
        def generate():
            # 8kb ‡¶ï‡¶∞‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶∞‡¶æ
            for chunk in r.iter_content(chunk_size=8192):
                yield chunk

        return Response(generate(), headers=headers)

    except requests.exceptions.RequestException as e:
        # ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßá
        print(f"Proxy Error for {original_url}: {e}")
        return f"Error accessing external file: The source link may be invalid or down. Details: {e}", 500


# ========== ROUTES (Mostly Unchanged) ========== #

@app.route("/")
def home():
    if "logged_in" in session:
        return redirect(url_for("admin"))
    return render_template_string(login_page)

@app.route("/login", methods=["POST"])
def login():
    username = request.form.get("username")
    password = request.form.get("password")
    if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
        session["logged_in"] = True
        return redirect(url_for("admin"))
    return "<h3 style='color:red;'>‚ùå Wrong username or password</h3><a href='/'>Go Back</a>"

@app.route("/admin")
def admin():
    if "logged_in" not in session:
        return redirect("/")
    return render_template_string(admin_panel)

@app.route("/generate", methods=["POST"])
def generate():
    if "logged_in" not in session:
        return redirect("/")
    url = request.form.get("url")
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá generate_proxy_link ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    link = generate_proxy_link(url) 
    return render_template_string(admin_panel, link=link)

@app.route("/logout")
def logout():
    session.pop("logged_in", None)
    return redirect("/")

@app.route("/health")
def health():
    return "OK", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000, debug=True)
